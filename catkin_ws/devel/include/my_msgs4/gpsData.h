// Generated by gencpp from file my_msgs4/gpsData.msg
// DO NOT EDIT!


#ifndef MY_MSGS4_MESSAGE_GPSDATA_H
#define MY_MSGS4_MESSAGE_GPSDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs4
{
template <class ContainerAllocator>
struct gpsData_
{
  typedef gpsData_<ContainerAllocator> Type;

  gpsData_()
    : northVel(0.0)
    , skyVel(0.0)
    , eastVel(0.0)
    , latitude(0.0)
    , longtitude(0.0)
    , height(0.0)  {
    }
  gpsData_(const ContainerAllocator& _alloc)
    : northVel(0.0)
    , skyVel(0.0)
    , eastVel(0.0)
    , latitude(0.0)
    , longtitude(0.0)
    , height(0.0)  {
  (void)_alloc;
    }



   typedef float _northVel_type;
  _northVel_type northVel;

   typedef float _skyVel_type;
  _skyVel_type skyVel;

   typedef float _eastVel_type;
  _eastVel_type eastVel;

   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longtitude_type;
  _longtitude_type longtitude;

   typedef float _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::my_msgs4::gpsData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs4::gpsData_<ContainerAllocator> const> ConstPtr;

}; // struct gpsData_

typedef ::my_msgs4::gpsData_<std::allocator<void> > gpsData;

typedef boost::shared_ptr< ::my_msgs4::gpsData > gpsDataPtr;
typedef boost::shared_ptr< ::my_msgs4::gpsData const> gpsDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs4::gpsData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs4::gpsData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_msgs4::gpsData_<ContainerAllocator1> & lhs, const ::my_msgs4::gpsData_<ContainerAllocator2> & rhs)
{
  return lhs.northVel == rhs.northVel &&
    lhs.skyVel == rhs.skyVel &&
    lhs.eastVel == rhs.eastVel &&
    lhs.latitude == rhs.latitude &&
    lhs.longtitude == rhs.longtitude &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_msgs4::gpsData_<ContainerAllocator1> & lhs, const ::my_msgs4::gpsData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_msgs4

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs4::gpsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs4::gpsData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs4::gpsData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs4::gpsData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs4::gpsData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs4::gpsData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs4::gpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e90aa33e849d86074f13628217060af8";
  }

  static const char* value(const ::my_msgs4::gpsData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe90aa33e849d8607ULL;
  static const uint64_t static_value2 = 0x4f13628217060af8ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs4::gpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs4/gpsData";
  }

  static const char* value(const ::my_msgs4::gpsData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs4::gpsData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 northVel\n"
"float32 skyVel\n"
"float32 eastVel\n"
"float32 latitude\n"
"float32 longtitude\n"
"float32 height\n"
;
  }

  static const char* value(const ::my_msgs4::gpsData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs4::gpsData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.northVel);
      stream.next(m.skyVel);
      stream.next(m.eastVel);
      stream.next(m.latitude);
      stream.next(m.longtitude);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gpsData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs4::gpsData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs4::gpsData_<ContainerAllocator>& v)
  {
    s << indent << "northVel: ";
    Printer<float>::stream(s, indent + "  ", v.northVel);
    s << indent << "skyVel: ";
    Printer<float>::stream(s, indent + "  ", v.skyVel);
    s << indent << "eastVel: ";
    Printer<float>::stream(s, indent + "  ", v.eastVel);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longtitude: ";
    Printer<float>::stream(s, indent + "  ", v.longtitude);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS4_MESSAGE_GPSDATA_H
